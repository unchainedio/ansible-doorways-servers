---
- name: Clone private GitHub repo and build Go binary
  hosts: all
  become: yes

  vars_files:
    - secret.enc
  vars:
    github_repo: "https://github.com/unchainedio/doorwaysftw"
    clone_dest: "~/doorwaysftw"
    go_binary_name: "generator_service"
    project_dir: "/root/doorwaysftw/generator_service"
    go_version: 1.21
    user: "linuxuser"
    branch: "{{ branch_name | default('main') }}"

  tasks:
    #- name: Ensure the destination directory is absent
    #  ansible.builtin.file:
    #   path: "{{ clone_dest }}"
    #   state: absent
          #become_user: yes
          #
          #- name: Get the latest commit hash from GitHub
          #ansible.builtin.command: "git ls-remote {{ github_repo }} HEAD"
      #ansible.builtin.command: "git ls-remote https://{{ github_token }}@{{ github_repo }} HEAD"
      #register: github_commit

    #- name: Get the current commit hash on the remote server
    # ansible.builtin.command: "git rev-parse HEAD"
    # args:
    #   chdir: "{{ clone_dest }}"
    # register: local_commit
    # ignore_errors: true

    #- name: Clone the private GitHub repository
    # ansible.builtin.git:
    #   repo: "{{ github_repo }}"
        #repo: "https://{{ github_token }}@github.com/ralfchristian/doorwaysftw.git"
        #   dest: "{{ clone_dest }}"
        # version: "{{ branch }}"
        # force: yes
        # accept_hostkey: yes
        # update: yes
        #when: local_commit.failed
        

    #    - name: Replace Go version in go.mod
      # lineinfile:
       # path: "{{ project_dir }}/go.mod"
        #regexp: '^go\s+\d+\.\d+(\.\d+)?'
        #line: "go {{ go_version }}"
        #state: present

    - name: Compile Go binary as root
      ansible.builtin.shell: |
        . /etc/profile
        go build -o {{ go_binary_name }} main.go
      args:
        chdir: "{{ project_dir }}"
      become: yes

    #    - name: Compile Go binary
      # ansible.builtin.shell: |
       # go build -o {{ go_binary_name }} main.go
      #args:
       # chdir: "{{ project_dir }}"
      #become: yes

    - name: Ensure Go binary is executable
      ansible.builtin.file:
        path: "{{ project_dir }}/{{ go_binary_name }}"
        mode: '0755'
        owner: root
        group: root


    - name: Create systemd service file for generator_service
      copy:
        dest: /etc/systemd/system/{{ go_binary_name }}.service
        content: |
          [Unit]
          Description={{ go_binary_name }}
          After=network.target

          [Service]
          Type=simple
          ExecStart={{ project_dir }}/{{go_binary_name}}
          WorkingDirectory={{ project_dir}}
          StandardOutput=append:/var/log/{{ go_binary_name }}.log
          StandardError=append:/var/log/{{ go_binary_name }}.err
          Restart=always
          User=root

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply new service file
      command: systemctl daemon-reload

    - name: restart the generator_service
      command: systemctl restart "{{ go_binary_name }}"

    - name: Enable generator_service to start on boot
      systemd:
        name: "{{ go_binary_name }}"
        enabled: yes
        state: started



          #- name: Run Go binary in background
          #shell: nohup ./generator_service >generator.log &
          #args:
          #executable: /bin/bash
          #chdir: /root/doorwaysftw/generator_service
      

          #- name: Ensure Go binary is running
          #command: pgrep -f generator_service
          #register: go_binary_process
          #retries: 3
          #delay: 5
          #until: go_binary_process.rc == 0

    
